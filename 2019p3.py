# Finding Manhattan Distance/Min Total Path to Closest Intersection
# Author:   Rachael Judy
# Date:     12/2/20
# Purpose:  2019 Advent of Code Problem 3 - Wiring
# some late night slightly sketchy, possibly malfunctioning code golf
# might eventually fix to use a function instead of duplicating code


import input

import sys
import numpy

# on first run to get xs and ys of matches set flag to 0 - will determine shortest manhattan
# copy results of xs and ys to if flag: section
# set flag to 1 and run again to find least steps
flag = 1
xs = []
ys = []
if flag:
    xs = [8538, 9129, 9414, 9414, 9414, 9414, 9414, 9652, 9652, 9652, 9652, 9615, 9414, 9129, 8900, 9462, 9621, 9621,
          9615, 9414, 9129, 8942, 8942, 8942, 8870, 8838, 8838, 7857, 9016, 9016, 8249, 8249, 8249, 8376, 8476, 8717,
          9129, 9414, 9520, 9423, 9414, 9129, 8717, 8708, 8708, 8708, 8838, 8870, 8934, 9700, 9685, 9652, 9520, 9423,
          9414, 9129, 8739, 8739, 8739, 8788, 9414, 9652, 9679, 9679, 9679, 9679, 9713, 10097, 10097, 10097, 10224,
          10595, 10616, 10718, 11162, 11162, 11162, 11162, 11162, 11162, 11104, 10956, 10903, 10865, 10819, 10819,
          10931, 10931, 10903, 10819, 10776, 10819, 10931, 11104, 11174, 11174, 11104, 10650, 10650, 10808, 10973,
          10973, 10973, 10973, 10931, 10819, 10593, 10516, 10485, 10470, 10389, 10239, 10229, 10154, 10111, 10111,
          10111, 10111, 10111, 10142, 10239, 10296, 10531, 10718, 10865, 10956, 10984, 11162, 11195, 11195, 11195,
          11195, 11636, 11636, 11411, 11411, 11296, 11009, 10808, 10914, 11292, 11504, 11491, 11491, 11623, 11839,
          11839, 11636, 11466, 11466, 11466, 11466, 11362, 11162, 10984, 10844, 10844, 10844, 10844, 10844, 10865,
          10903, 10956, 11162, 11189, 11189, 11189, 11189, 11189, 11189, 11189, 10973, 10681, 10681, 10681, 10681,
          10946, 10946, 10946, 10946, 10946, 10946, 10946, 10946, 10946, 10946, 10946, 10903, 10865, 10844, 10757,
          10757, 10757, 10757, 10776, 10819, 10931, 10946, 10956, 11101, 11101, 11101, 11101, 11101, 11101, 11101,
          11101, 11101, 11101, 11162, 11257, 11323, 11362, 11466, 11636, 11715, 11636, 11466, 11323, 11257, 11195,
          11162, 11101, 10984, 10958, 10958, 10958, 10958, 10958, 11101, 11104, 11162, 11189, 11195, 11636, 11791,
          11791, 11886, 11893, 11921, 11893, 11886, 11623, 11491, 11296, 11030, 11296, 11623, 11886, 11963, 13865,
          13865, 13636, 13244, 12541, 12434, 12328, 12491, 12491, 12491, 12541, 13095, 13488, 12491, 12413, 12413,
          11963, 11699, 11623, 11571, 11571, 11571, 11411, 11367, 11321, 11189, 11104, 11065, 11065, 11065, 11065,
          11065, 11065, 11065, 11065, 11065, 11296, 11420, 11491, 11571, 11575, 11571, 11491, 11465, 11465, 11465,
          11465, 11614, 11614, 11614, 11575, 11571, 11491, 11465, 11296, 11065, 10973, 10906, 10906, 10906, 11009,
          11296, 11497, 11497, 11497, 11497, 11497, 11497, 11497, 11491, 11469, 11261, 11189, 11174, 11116, 11116,
          11116, 11116, 11116, 11116, 11189, 11367, 11411, 11791, 11968, 12582, 13169, 12655, 12655, 12655, 12541,
          12434, 11963, 11764, 11504, 11292, 11009, 11212, 11212, 11212, 11009, 10808, 10673, 10412, 10412, 10412,
          10412, 10229, 10154, 9963, 9927, 9927, 9963, 9992, 10050, 10050, 10029, 10029, 10029, 10029, 10029, 9992,
          9991, 9991, 9991, 9991, 9991, 9991, 9991, 9991, 9991, 9877, 9877, 9877, 9959, 10065, 10224, 10559, 10595,
          10616, 10685, 10813, 10813, 10813, 10813, 10813, 10531, 10296, 10239, 10142, 10111, 9991, 9981, 9981, 9981,
          9981, 9981, 9959, 9877, 9679, 9652, 9499, 9351, 8346, 8788, 8788, 8788, 9198, 8905, 8817, 8817, 8788, 8726,
          8739, 8788, 9414, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9700, 10253, 10291, 10313, 10313,
          10313, 10313, 10592, 10592, 10592, 10592, 10592, 10592, 10668, 11077, 11077, 10990, 10943, 10253, 10137,
          10137, 10137, 9959, 9934, 9700, 9666, 9621, 9440, 9280, 9280, 9280, 9733, 9733, 9733]
    ys = [10735, 10822, 11149, 11151, 11286, 11328, 11592, 11592, 11151, 10971, 10962, 10847, 10847, 10847, 10822,
          10607, 10761, 10847, 10956, 10956, 10956, 10847, 10822, 10607, 10438, 10735, 10822, 11864, 12266, 12311,
          12196, 12101, 11399, 11390, 11390, 11328, 10969, 10969, 10971, 11077, 11077, 11077, 11077, 10855, 10822,
          10735, 10579, 10579, 10438, 10962, 10994, 10994, 10994, 10994, 10994, 10994, 11077, 11328, 11394, 11466,
          11466, 11466, 11592, 11901, 12207, 12383, 12410, 12383, 12207, 11916, 11728, 11783, 11783, 11783, 12121,
          12407, 12503, 12573, 12686, 12717, 12744, 12744, 12744, 12744, 12836, 12937, 12937, 12853, 12849, 12849,
          12937, 13011, 13011, 13011, 13237, 13319, 13456, 13469, 13657, 13712, 13469, 13456, 13319, 13237, 13125,
          13125, 13125, 13125, 13125, 13125, 13125, 13125, 13125, 13125, 13108, 12903, 12836, 12830, 12479, 12399,
          12399, 12399, 12399, 12399, 12169, 12169, 12169, 12169, 12407, 12503, 12573, 12686, 12708, 12801, 12853,
          13319, 13821, 13821, 13737, 15955, 14572, 14302, 13334, 13540, 13540, 12801, 12708, 12465, 12171, 12127,
          12122, 12061, 11951, 11951, 11951, 12001, 12169, 12402, 12503, 12573, 12624, 12624, 12624, 12624, 12686,
          12717, 12853, 12937, 12993, 13237, 13319, 13567, 13469, 13456, 13319, 13237, 13125, 13011, 12937, 12853,
          12744, 12717, 12686, 12654, 12624, 12573, 12503, 12445, 12445, 12445, 12503, 12686, 12717, 12836, 12874,
          12874, 12874, 12874, 12874, 12853, 12744, 12717, 12686, 12654, 12624, 12573, 12503, 12407, 12169, 12155,
          12155, 12155, 12155, 12155, 12155, 12155, 12354, 12354, 12354, 12354, 12354, 12354, 12354, 12354, 12503,
          12573, 12624, 12654, 12686, 12704, 12704, 12704, 12704, 12704, 12704, 12708, 12801, 13186, 13186, 13186,
          13719, 13719, 13719, 13719, 13719, 13821, 13887, 13887, 13887, 13924, 13640, 13881, 14001, 14703, 14558,
          14558, 14558, 14725, 14670, 14558, 14465, 14517, 14703, 15041, 14725, 14558, 14406, 13887, 13836, 13719,
          13540, 13334, 12951, 12951, 12951, 12951, 12951, 12993, 13011, 13237, 13319, 13456, 13469, 13567, 13719,
          13821, 13862, 13821, 13730, 13730, 13719, 13610, 13610, 13719, 13730, 13821, 13887, 13887, 13836, 13719,
          13635, 13635, 13635, 13635, 13635, 13635, 13635, 13712, 13737, 13821, 14013, 14013, 13978, 13887, 13730,
          13719, 13635, 13610, 13540, 13428, 13428, 13428, 13428, 13428, 13319, 13237, 13011, 12993, 12951, 12937,
          12911, 12911, 12911, 12911, 13186, 13616, 13616, 13530, 13616, 13697, 14198, 14198, 14198, 14508, 14509,
          14509, 14509, 14764, 14572, 14509, 14380, 14380, 14380, 13737, 13657, 13547, 13539, 13525, 13525, 13525,
          13108, 12903, 12862, 12862, 12836, 12830, 12830, 12836, 12862, 12903, 13108, 13188, 13108, 12903, 12862,
          12836, 12830, 12723, 12479, 12410, 12383, 12207, 12036, 11822, 11679, 11679, 11679, 11679, 11679, 11679,
          11679, 11783, 11895, 12001, 12169, 12402, 12444, 12444, 12444, 12444, 12444, 12444, 12410, 12383, 12324,
          12207, 12036, 11776, 11776, 11776, 11776, 11793, 11855, 12101, 11500, 11730, 11812, 11855, 12003, 11812,
          11730, 11676, 11500, 11459, 11459, 11459, 11151, 11077, 10994, 10971, 10969, 10956, 10847, 10689, 10607,
          10517, 10517, 10760, 11055, 11679, 11724, 11728, 11783, 11725, 11724, 11679, 11590, 11055, 10930, 10796,
          10787, 10063, 10063, 10063, 10517, 10760, 10932, 10954, 10954, 10690, 10690, 10690, 10690, 10689, 10607,
          10270, 10130, 10517, 10690]

# read file in - an array of two arrays, one for each wire
paths = input.readCSVstr('steps.csv', ',')

# parse based on R, D, L, U etc, update grid
grid = numpy.zeros((20000, 20000))
ind = 0
sol = 100000 # set initial high
center = 10000

# count steps for each wire
stepCount = [0, 0]
# on second pass keep minimum
steps = [[500000 for i in xs], [500000 for j in ys]]
marked = [0 for k in range(len(xs)+1)]

# populate the close spot options
while ind < len(paths): # do both wires
    v = paths[ind]
    x = center
    y = center
    # go through both wire paths
    for d in v:
        direction = d[0]
        distance = int(d[1:])
        dir = -1 + 2*(direction == 'U' or direction == 'R') # to differentiate vertical and horizontal + and -

        for i in range(distance):
            # if unmarked for this wire
            if grid[x, y] != ind + 1:
                grid[x, y] += 1

            # if found a common spot - would only see on second pass
            if grid[x, y] == len(paths) and x != center and y != center and not flag:
                xs.append(x)
                ys.append(y)
                sol = min(sol, abs(x - center) + abs(y - center))

            # if on second pass, check if in matches and how many steps to get there
            elif flag:
                if x in xs and y in ys:
                    for j in range(len(xs)):
                        if x == xs[j] and y == ys[j] and marked[j] == ind:
                            steps[ind][j] = min(steps[ind][j], stepCount[ind])
                            marked[j] = ind+1
                            break

            stepCount[ind] += 1
            if direction == 'U' or direction == 'D':
                y += 1*dir
            else:
                x += 1*dir
    # look at next wire vector
    ind += 1


# find minimum combination
ans = 100000
for it in range(len(steps[0])):
    ans = min(ans, steps[0][it] + steps[1][it])

# print either Manhattan or step count
if not flag:
    print("Closest Manhattan: ", sol)
    print("xs = ", xs)
    print("ys = ", ys)
else:
    print("Closest step count: ", ans)